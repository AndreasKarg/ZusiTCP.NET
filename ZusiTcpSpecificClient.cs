//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:2.0.50727.5477
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Zusi_Datenausgabe {
    
    
    public sealed class ZusiTcpSpecificClient : Zusi_Datenausgabe.ZusiTcpTypeClientAbstract {
        
        private float Geschwindigkeit_;
        
        private float DruckHauptluftleitung_;
        
        private float DruckBremszylinder_;
        
        private float DruckHauptluftbehaelter_;
        
        private float ZugkraftGesamt_;
        
        private float ZugkraftProAchse_;
        
        private float Strom_;
        
        private float Spannung_;
        
        private float Motordrehzahl_;
        
        private float UhrzeitStunde_;
        
        private float UhrzeitMinute_;
        
        private float UhrzeitSekunde_;
        
        private float LZBZielGeschwindigkeit_;
        
        private float LZBAFBSollGeschwindigkeit_;
        
        private float LZBZielweg_;
        
        private float Fahrstufe_;
        
        private float AFBSollGeschwindigkeit_;
        
        private float DruckHilfsluftbehaelter_;
        
        private bool LMPZB1000Hz_;
        
        private bool LMPZB500Hz_;
        
        private bool LMPZBBefehl_;
        
        private bool LMPZBZugartU_Boolean_;
        
        private float LMPZBZugartU_Single_;
        
        private bool LMPZBZugartM_Boolean_;
        
        private float LMPZBZugartM_Single_;
        
        private bool LMPZBZugartO_;
        
        private bool LMLZBH_;
        
        private bool LMLZBG_;
        
        private bool LMLZBE40_;
        
        private bool LMLZBEL_;
        
        private bool LMLZBEnde_;
        
        private bool LMLZBV40_;
        
        private bool LMLZBB_;
        
        private bool LMLZBS_;
        
        private bool LMLZBUe_;
        
        private bool LMLZBPruefen_;
        
        private bool LMSifa_;
        
        private bool LMHauptschalter_;
        
        private bool LMGetriebe_;
        
        private bool LMSchleudern_;
        
        private bool LMGleiten_;
        
        private bool LMMgBremse_;
        
        private bool LMHBremse_;
        
        private bool LMRBremse_;
        
        private bool LMHochabbremsung_;
        
        private bool LMSchnellbremsung_;
        
        private bool LMNotbremsung_;
        
        private float LMTueren_;
        
        private float LMTfzNummer_;
        
        private float LMMaxTfzGeschwindidigkeit_;
        
        private System.DateTime LMUhrzeitDigital_;
        
        private float SchalterFahrstufen_;
        
        private float SchalterFuehrerbremsventil_;
        
        private float SchalterDynBremse_;
        
        private float SchalterZusatzbremse_;
        
        private float SchalterAFBGeschwindigkeit_;
        
        private bool SchalterAFBEinAus_;
        
        private bool SchalterMgBremse_;
        
        private bool SchalterPZBWachsam_;
        
        private bool SchalterPZBFrei_;
        
        private bool SchalterPZBBefehl_;
        
        private bool SchalterSifa_;
        
        private bool SchalterHauptschalter_;
        
        private bool SchalterMotorEinAus_;
        
        private int SchalterFahrtrichtung_;
        
        private bool SchalterPfeife_;
        
        private bool SchalterSanden_;
        
        private bool SchalterTueren_;
        
        private bool SchalterGlocke_;
        
        private bool SchalterLokbremseEntlueften_;
        
        private bool SchalterSchleuderschutzbremse_;
        
        private bool LMDrehzahlverstellung_;
        
        private bool LMFahrtrichtungVor_;
        
        private bool LMFahrtrichtungZurueck_;
        
        private bool SchalterSignum_;
        
        private float LMLZBZielwegAb0_;
        
        private float LZBSollGeschwindigkeit_;
        
        private string LMBlockBisZuDemDieStreckeFreiIst_;
        
        private bool SchalterLuefter_;
        
        private bool LMGNTG_;
        
        private bool LMGNTUe_;
        
        private bool LMGNTB_;
        
        private bool LMGNTS_;
        
        private float StreckenKm_;
        
        private Zusi_Datenausgabe.DoorState Tueren_;
        
        private bool Autopilot_;
        
        private bool Reisezug_;
        
        private Zusi_Datenausgabe.PZBSystem PZBSystem_;
        
        private float FramesPerSecond_;
        
        private bool FuehrerstandSichtbar_;
        
        private string NaechsterBlockname_;
        
        private string NaechstesGleis_;
        
        private float Bremshundertstel_;
        
        private Zusi_Datenausgabe.BrakeConfiguration Bremsstellung_;
        
        private string Zugdatei_;
        
        private float Laengsbeschleunigung_;
        
        private float Querbeschleunigung_;
        
        private float Querneigung_;
        
        private float AktuelleHoechstgeschwindigkeit_;
        
        private float AktuelleZielgeschwindigkeit_;
        
        private float Zielweg_;
        
        private float AbstandNaechsterReisezughalt_;
        
        private string NameNaechsterReisezughalt_;
        
        private System.DateTime PlanzeitNaechsterReisezughalt_;
        
        private bool PZBRestriktiv_;
        
        private bool PZBZwansgbremsung_;
        
        public ZusiTcpSpecificClient(string clientId, Zusi_Datenausgabe.ClientPriority priority, System.Threading.SynchronizationContext hostContext) : 
                base(clientId, priority, hostContext, CreateCommandSet()) {
        }
        
        public ZusiTcpSpecificClient(string clientId, Zusi_Datenausgabe.ClientPriority priority) : 
                base(clientId, priority, CreateCommandSet()) {
        }
        
        /// <summary>
        /// Returns the current state of Geschwindigkeit.
        /// </summary>
        public float Geschwindigkeit {
            get {
                return this.Geschwindigkeit_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Druck Hauptluftleitung.
        /// </summary>
        public float DruckHauptluftleitung {
            get {
                return this.DruckHauptluftleitung_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Druck Bremszylinder.
        /// </summary>
        public float DruckBremszylinder {
            get {
                return this.DruckBremszylinder_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Druck Hauptluftbehälter.
        /// </summary>
        public float DruckHauptluftbehaelter {
            get {
                return this.DruckHauptluftbehaelter_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Zugkraft gesamt.
        /// </summary>
        public float ZugkraftGesamt {
            get {
                return this.ZugkraftGesamt_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Zugkraft pro Achse.
        /// </summary>
        public float ZugkraftProAchse {
            get {
                return this.ZugkraftProAchse_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Strom.
        /// </summary>
        public float Strom {
            get {
                return this.Strom_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Spannung.
        /// </summary>
        public float Spannung {
            get {
                return this.Spannung_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Motordrehzahl.
        /// </summary>
        public float Motordrehzahl {
            get {
                return this.Motordrehzahl_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Uhrzeit Stunde.
        /// </summary>
        public float UhrzeitStunde {
            get {
                return this.UhrzeitStunde_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Uhrzeit Minute.
        /// </summary>
        public float UhrzeitMinute {
            get {
                return this.UhrzeitMinute_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Uhrzeit Sekunde.
        /// </summary>
        public float UhrzeitSekunde {
            get {
                return this.UhrzeitSekunde_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LZB Ziel-Geschwindigkeit.
        /// </summary>
        public float LZBZielGeschwindigkeit {
            get {
                return this.LZBZielGeschwindigkeit_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LZB/AFB Soll-Geschwindigkeit.
        /// </summary>
        public float LZBAFBSollGeschwindigkeit {
            get {
                return this.LZBAFBSollGeschwindigkeit_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LZB Zielweg.
        /// </summary>
        public float LZBZielweg {
            get {
                return this.LZBZielweg_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Fahrstufe.
        /// </summary>
        public float Fahrstufe {
            get {
                return this.Fahrstufe_;
            }
        }
        
        /// <summary>
        /// Returns the current state of AFB Soll-Geschwindigkeit.
        /// </summary>
        public float AFBSollGeschwindigkeit {
            get {
                return this.AFBSollGeschwindigkeit_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Druck Hilfsluftbehälter.
        /// </summary>
        public float DruckHilfsluftbehaelter {
            get {
                return this.DruckHilfsluftbehaelter_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LM PZB 1000Hz.
        /// </summary>
        public bool LMPZB1000Hz {
            get {
                return this.LMPZB1000Hz_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LM PZB 500Hz.
        /// </summary>
        public bool LMPZB500Hz {
            get {
                return this.LMPZB500Hz_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LM PZB Befehl.
        /// </summary>
        public bool LMPZBBefehl {
            get {
                return this.LMPZBBefehl_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LM PZB Zugart U.
        /// </summary>
        public bool LMPZBZugartU_Boolean {
            get {
                return this.LMPZBZugartU_Boolean_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LM PZB Zugart U.
        /// </summary>
        public float LMPZBZugartU_Single {
            get {
                return this.LMPZBZugartU_Single_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LM PZB Zugart M.
        /// </summary>
        public bool LMPZBZugartM_Boolean {
            get {
                return this.LMPZBZugartM_Boolean_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LM PZB Zugart M.
        /// </summary>
        public float LMPZBZugartM_Single {
            get {
                return this.LMPZBZugartM_Single_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LM PZB Zugart O.
        /// </summary>
        public bool LMPZBZugartO {
            get {
                return this.LMPZBZugartO_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LM LZB H.
        /// </summary>
        public bool LMLZBH {
            get {
                return this.LMLZBH_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LM LZB G.
        /// </summary>
        public bool LMLZBG {
            get {
                return this.LMLZBG_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LM LZB E40.
        /// </summary>
        public bool LMLZBE40 {
            get {
                return this.LMLZBE40_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LM LZB EL.
        /// </summary>
        public bool LMLZBEL {
            get {
                return this.LMLZBEL_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LM LZB Ende.
        /// </summary>
        public bool LMLZBEnde {
            get {
                return this.LMLZBEnde_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LM LZB V40.
        /// </summary>
        public bool LMLZBV40 {
            get {
                return this.LMLZBV40_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LM LZB B.
        /// </summary>
        public bool LMLZBB {
            get {
                return this.LMLZBB_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LM LZB S.
        /// </summary>
        public bool LMLZBS {
            get {
                return this.LMLZBS_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LM LZB Ü.
        /// </summary>
        public bool LMLZBUe {
            get {
                return this.LMLZBUe_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LM LZB Prüfen.
        /// </summary>
        public bool LMLZBPruefen {
            get {
                return this.LMLZBPruefen_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LM Sifa.
        /// </summary>
        public bool LMSifa {
            get {
                return this.LMSifa_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LM Hauptschalter.
        /// </summary>
        public bool LMHauptschalter {
            get {
                return this.LMHauptschalter_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LM Getriebe.
        /// </summary>
        public bool LMGetriebe {
            get {
                return this.LMGetriebe_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LM Schleudern.
        /// </summary>
        public bool LMSchleudern {
            get {
                return this.LMSchleudern_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LM Gleiten.
        /// </summary>
        public bool LMGleiten {
            get {
                return this.LMGleiten_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LM Mg-Bremse.
        /// </summary>
        public bool LMMgBremse {
            get {
                return this.LMMgBremse_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LM H-Bremse.
        /// </summary>
        public bool LMHBremse {
            get {
                return this.LMHBremse_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LM R-Bremse.
        /// </summary>
        public bool LMRBremse {
            get {
                return this.LMRBremse_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LM Hochabbremsung.
        /// </summary>
        public bool LMHochabbremsung {
            get {
                return this.LMHochabbremsung_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LM Schnellbremsung.
        /// </summary>
        public bool LMSchnellbremsung {
            get {
                return this.LMSchnellbremsung_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LM Notbremsung.
        /// </summary>
        public bool LMNotbremsung {
            get {
                return this.LMNotbremsung_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LM Türen.
        /// </summary>
        public float LMTueren {
            get {
                return this.LMTueren_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LM Tfz-Nummer.
        /// </summary>
        public float LMTfzNummer {
            get {
                return this.LMTfzNummer_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LM max. Tfz-Geschwindidigkeit.
        /// </summary>
        public float LMMaxTfzGeschwindidigkeit {
            get {
                return this.LMMaxTfzGeschwindidigkeit_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LM Uhrzeit (digital).
        /// </summary>
        public System.DateTime LMUhrzeitDigital {
            get {
                return this.LMUhrzeitDigital_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Schalter Fahrstufen.
        /// </summary>
        public float SchalterFahrstufen {
            get {
                return this.SchalterFahrstufen_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Schalter Führerbremsventil.
        /// </summary>
        public float SchalterFuehrerbremsventil {
            get {
                return this.SchalterFuehrerbremsventil_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Schalter dyn. Bremse.
        /// </summary>
        public float SchalterDynBremse {
            get {
                return this.SchalterDynBremse_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Schalter Zusatzbremse.
        /// </summary>
        public float SchalterZusatzbremse {
            get {
                return this.SchalterZusatzbremse_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Schalter AFB-Geschwindigkeit.
        /// </summary>
        public float SchalterAFBGeschwindigkeit {
            get {
                return this.SchalterAFBGeschwindigkeit_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Schalter AFB ein/aus.
        /// </summary>
        public bool SchalterAFBEinAus {
            get {
                return this.SchalterAFBEinAus_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Schalter Mg-Bremse.
        /// </summary>
        public bool SchalterMgBremse {
            get {
                return this.SchalterMgBremse_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Schalter PZB Wachsam.
        /// </summary>
        public bool SchalterPZBWachsam {
            get {
                return this.SchalterPZBWachsam_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Schalter PZB Frei.
        /// </summary>
        public bool SchalterPZBFrei {
            get {
                return this.SchalterPZBFrei_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Schalter PZB Befehl.
        /// </summary>
        public bool SchalterPZBBefehl {
            get {
                return this.SchalterPZBBefehl_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Schalter Sifa.
        /// </summary>
        public bool SchalterSifa {
            get {
                return this.SchalterSifa_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Schalter Hauptschalter.
        /// </summary>
        public bool SchalterHauptschalter {
            get {
                return this.SchalterHauptschalter_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Schalter Motor ein/aus.
        /// </summary>
        public bool SchalterMotorEinAus {
            get {
                return this.SchalterMotorEinAus_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Schalter Fahrtrichtung.
        /// </summary>
        public int SchalterFahrtrichtung {
            get {
                return this.SchalterFahrtrichtung_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Schalter Pfeife.
        /// </summary>
        public bool SchalterPfeife {
            get {
                return this.SchalterPfeife_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Schalter Sanden.
        /// </summary>
        public bool SchalterSanden {
            get {
                return this.SchalterSanden_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Schalter Türen.
        /// </summary>
        public bool SchalterTueren {
            get {
                return this.SchalterTueren_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Schalter Glocke.
        /// </summary>
        public bool SchalterGlocke {
            get {
                return this.SchalterGlocke_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Schalter Lokbremse entlüften.
        /// </summary>
        public bool SchalterLokbremseEntlueften {
            get {
                return this.SchalterLokbremseEntlueften_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Schalter Schleuderschutzbremse.
        /// </summary>
        public bool SchalterSchleuderschutzbremse {
            get {
                return this.SchalterSchleuderschutzbremse_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LM Drehzahlverstellung.
        /// </summary>
        public bool LMDrehzahlverstellung {
            get {
                return this.LMDrehzahlverstellung_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LM Fahrtrichtung vor.
        /// </summary>
        public bool LMFahrtrichtungVor {
            get {
                return this.LMFahrtrichtungVor_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LM Fahrtrichtung zurück.
        /// </summary>
        public bool LMFahrtrichtungZurueck {
            get {
                return this.LMFahrtrichtungZurueck_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Schalter Signum.
        /// </summary>
        public bool SchalterSignum {
            get {
                return this.SchalterSignum_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LM LZB Zielweg (ab 0).
        /// </summary>
        public float LMLZBZielwegAb0 {
            get {
                return this.LMLZBZielwegAb0_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LZB Soll-Geschwindigkeit.
        /// </summary>
        public float LZBSollGeschwindigkeit {
            get {
                return this.LZBSollGeschwindigkeit_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LM Block, bis zu dem die Strecke frei ist.
        /// </summary>
        public string LMBlockBisZuDemDieStreckeFreiIst {
            get {
                return this.LMBlockBisZuDemDieStreckeFreiIst_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Schalter Lüfter.
        /// </summary>
        public bool SchalterLuefter {
            get {
                return this.SchalterLuefter_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LM GNT G.
        /// </summary>
        public bool LMGNTG {
            get {
                return this.LMGNTG_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LM GNT Ü.
        /// </summary>
        public bool LMGNTUe {
            get {
                return this.LMGNTUe_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LM GNT B.
        /// </summary>
        public bool LMGNTB {
            get {
                return this.LMGNTB_;
            }
        }
        
        /// <summary>
        /// Returns the current state of LM GNT S.
        /// </summary>
        public bool LMGNTS {
            get {
                return this.LMGNTS_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Strecken-Km.
        /// </summary>
        public float StreckenKm {
            get {
                return this.StreckenKm_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Türen.
        /// </summary>
        public Zusi_Datenausgabe.DoorState Tueren {
            get {
                return this.Tueren_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Autopilot.
        /// </summary>
        public bool Autopilot {
            get {
                return this.Autopilot_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Reisezug.
        /// </summary>
        public bool Reisezug {
            get {
                return this.Reisezug_;
            }
        }
        
        /// <summary>
        /// Returns the current state of PZB-System.
        /// </summary>
        public Zusi_Datenausgabe.PZBSystem PZBSystem {
            get {
                return this.PZBSystem_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Frames per Second.
        /// </summary>
        public float FramesPerSecond {
            get {
                return this.FramesPerSecond_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Führerstand sichtbar.
        /// </summary>
        public bool FuehrerstandSichtbar {
            get {
                return this.FuehrerstandSichtbar_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Nächster Blockname.
        /// </summary>
        public string NaechsterBlockname {
            get {
                return this.NaechsterBlockname_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Nächstes Gleis.
        /// </summary>
        public string NaechstesGleis {
            get {
                return this.NaechstesGleis_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Bremshundertstel.
        /// </summary>
        public float Bremshundertstel {
            get {
                return this.Bremshundertstel_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Bremsstellung.
        /// </summary>
        public Zusi_Datenausgabe.BrakeConfiguration Bremsstellung {
            get {
                return this.Bremsstellung_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Zugdatei.
        /// </summary>
        public string Zugdatei {
            get {
                return this.Zugdatei_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Längsbeschleunigung.
        /// </summary>
        public float Laengsbeschleunigung {
            get {
                return this.Laengsbeschleunigung_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Querbeschleunigung.
        /// </summary>
        public float Querbeschleunigung {
            get {
                return this.Querbeschleunigung_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Querneigung.
        /// </summary>
        public float Querneigung {
            get {
                return this.Querneigung_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Aktuelle Höchstgeschwindigkeit.
        /// </summary>
        public float AktuelleHoechstgeschwindigkeit {
            get {
                return this.AktuelleHoechstgeschwindigkeit_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Aktuelle Zielgeschwindigkeit.
        /// </summary>
        public float AktuelleZielgeschwindigkeit {
            get {
                return this.AktuelleZielgeschwindigkeit_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Zielweg.
        /// </summary>
        public float Zielweg {
            get {
                return this.Zielweg_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Abstand nächster Reisezughalt.
        /// </summary>
        public float AbstandNaechsterReisezughalt {
            get {
                return this.AbstandNaechsterReisezughalt_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Name nächster Reisezughalt.
        /// </summary>
        public string NameNaechsterReisezughalt {
            get {
                return this.NameNaechsterReisezughalt_;
            }
        }
        
        /// <summary>
        /// Returns the current state of Planzeit nächster Reisezughalt.
        /// </summary>
        public System.DateTime PlanzeitNaechsterReisezughalt {
            get {
                return this.PlanzeitNaechsterReisezughalt_;
            }
        }
        
        /// <summary>
        /// Returns the current state of PZB restriktiv.
        /// </summary>
        public bool PZBRestriktiv {
            get {
                return this.PZBRestriktiv_;
            }
        }
        
        /// <summary>
        /// Returns the current state of PZB-Zwansgbremsung.
        /// </summary>
        public bool PZBZwansgbremsung {
            get {
                return this.PZBZwansgbremsung_;
            }
        }
        
        public event System.EventHandler Geschwindigkeit_Changed;
        
        public event System.EventHandler DruckHauptluftleitung_Changed;
        
        public event System.EventHandler DruckBremszylinder_Changed;
        
        public event System.EventHandler DruckHauptluftbehaelter_Changed;
        
        public event System.EventHandler ZugkraftGesamt_Changed;
        
        public event System.EventHandler ZugkraftProAchse_Changed;
        
        public event System.EventHandler Strom_Changed;
        
        public event System.EventHandler Spannung_Changed;
        
        public event System.EventHandler Motordrehzahl_Changed;
        
        public event System.EventHandler UhrzeitStunde_Changed;
        
        public event System.EventHandler UhrzeitMinute_Changed;
        
        public event System.EventHandler UhrzeitSekunde_Changed;
        
        public event System.EventHandler LZBZielGeschwindigkeit_Changed;
        
        public event System.EventHandler LZBAFBSollGeschwindigkeit_Changed;
        
        public event System.EventHandler LZBZielweg_Changed;
        
        public event System.EventHandler Fahrstufe_Changed;
        
        public event System.EventHandler AFBSollGeschwindigkeit_Changed;
        
        public event System.EventHandler DruckHilfsluftbehaelter_Changed;
        
        public event System.EventHandler LMPZB1000Hz_Changed;
        
        public event System.EventHandler LMPZB500Hz_Changed;
        
        public event System.EventHandler LMPZBBefehl_Changed;
        
        public event System.EventHandler LMPZBZugartU_Boolean_Changed;
        
        public event System.EventHandler LMPZBZugartU_Single_Changed;
        
        public event System.EventHandler LMPZBZugartM_Boolean_Changed;
        
        public event System.EventHandler LMPZBZugartM_Single_Changed;
        
        public event System.EventHandler LMPZBZugartO_Changed;
        
        public event System.EventHandler LMLZBH_Changed;
        
        public event System.EventHandler LMLZBG_Changed;
        
        public event System.EventHandler LMLZBE40_Changed;
        
        public event System.EventHandler LMLZBEL_Changed;
        
        public event System.EventHandler LMLZBEnde_Changed;
        
        public event System.EventHandler LMLZBV40_Changed;
        
        public event System.EventHandler LMLZBB_Changed;
        
        public event System.EventHandler LMLZBS_Changed;
        
        public event System.EventHandler LMLZBUe_Changed;
        
        public event System.EventHandler LMLZBPruefen_Changed;
        
        public event System.EventHandler LMSifa_Changed;
        
        public event System.EventHandler LMHauptschalter_Changed;
        
        public event System.EventHandler LMGetriebe_Changed;
        
        public event System.EventHandler LMSchleudern_Changed;
        
        public event System.EventHandler LMGleiten_Changed;
        
        public event System.EventHandler LMMgBremse_Changed;
        
        public event System.EventHandler LMHBremse_Changed;
        
        public event System.EventHandler LMRBremse_Changed;
        
        public event System.EventHandler LMHochabbremsung_Changed;
        
        public event System.EventHandler LMSchnellbremsung_Changed;
        
        public event System.EventHandler LMNotbremsung_Changed;
        
        public event System.EventHandler LMTueren_Changed;
        
        public event System.EventHandler LMTfzNummer_Changed;
        
        public event System.EventHandler LMMaxTfzGeschwindidigkeit_Changed;
        
        public event System.EventHandler LMUhrzeitDigital_Changed;
        
        public event System.EventHandler SchalterFahrstufen_Changed;
        
        public event System.EventHandler SchalterFuehrerbremsventil_Changed;
        
        public event System.EventHandler SchalterDynBremse_Changed;
        
        public event System.EventHandler SchalterZusatzbremse_Changed;
        
        public event System.EventHandler SchalterAFBGeschwindigkeit_Changed;
        
        public event System.EventHandler SchalterAFBEinAus_Changed;
        
        public event System.EventHandler SchalterMgBremse_Changed;
        
        public event System.EventHandler SchalterPZBWachsam_Changed;
        
        public event System.EventHandler SchalterPZBFrei_Changed;
        
        public event System.EventHandler SchalterPZBBefehl_Changed;
        
        public event System.EventHandler SchalterSifa_Changed;
        
        public event System.EventHandler SchalterHauptschalter_Changed;
        
        public event System.EventHandler SchalterMotorEinAus_Changed;
        
        public event System.EventHandler SchalterFahrtrichtung_Changed;
        
        public event System.EventHandler SchalterPfeife_Changed;
        
        public event System.EventHandler SchalterSanden_Changed;
        
        public event System.EventHandler SchalterTueren_Changed;
        
        public event System.EventHandler SchalterGlocke_Changed;
        
        public event System.EventHandler SchalterLokbremseEntlueften_Changed;
        
        public event System.EventHandler SchalterSchleuderschutzbremse_Changed;
        
        public event System.EventHandler LMDrehzahlverstellung_Changed;
        
        public event System.EventHandler LMFahrtrichtungVor_Changed;
        
        public event System.EventHandler LMFahrtrichtungZurueck_Changed;
        
        public event System.EventHandler SchalterSignum_Changed;
        
        public event System.EventHandler LMLZBZielwegAb0_Changed;
        
        public event System.EventHandler LZBSollGeschwindigkeit_Changed;
        
        public event System.EventHandler LMBlockBisZuDemDieStreckeFreiIst_Changed;
        
        public event System.EventHandler SchalterLuefter_Changed;
        
        public event System.EventHandler LMGNTG_Changed;
        
        public event System.EventHandler LMGNTUe_Changed;
        
        public event System.EventHandler LMGNTB_Changed;
        
        public event System.EventHandler LMGNTS_Changed;
        
        public event System.EventHandler StreckenKm_Changed;
        
        public event System.EventHandler Tueren_Changed;
        
        public event System.EventHandler Autopilot_Changed;
        
        public event System.EventHandler Reisezug_Changed;
        
        public event System.EventHandler PZBSystem_Changed;
        
        public event System.EventHandler FramesPerSecond_Changed;
        
        public event System.EventHandler FuehrerstandSichtbar_Changed;
        
        public event System.EventHandler NaechsterBlockname_Changed;
        
        public event System.EventHandler NaechstesGleis_Changed;
        
        public event System.EventHandler Bremshundertstel_Changed;
        
        public event System.EventHandler Bremsstellung_Changed;
        
        public event System.EventHandler Zugdatei_Changed;
        
        public event System.EventHandler Laengsbeschleunigung_Changed;
        
        public event System.EventHandler Querbeschleunigung_Changed;
        
        public event System.EventHandler Querneigung_Changed;
        
        public event System.EventHandler AktuelleHoechstgeschwindigkeit_Changed;
        
        public event System.EventHandler AktuelleZielgeschwindigkeit_Changed;
        
        public event System.EventHandler Zielweg_Changed;
        
        public event System.EventHandler AbstandNaechsterReisezughalt_Changed;
        
        public event System.EventHandler NameNaechsterReisezughalt_Changed;
        
        public event System.EventHandler PlanzeitNaechsterReisezughalt_Changed;
        
        public event System.EventHandler PZBRestriktiv_Changed;
        
        public event System.EventHandler PZBZwansgbremsung_Changed;
        
        private static Zusi_Datenausgabe.CommandSet CreateCommandSet() {
            Zusi_Datenausgabe.CommandSet document;
            document = new Zusi_Datenausgabe.CommandSet();
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2561, "Geschwindigkeit", "Single"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2562, "Druck Hauptluftleitung", "Single"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2563, "Druck Bremszylinder", "Single"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2564, "Druck Hauptluftbehälter", "Single"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2565, "Zugkraft gesamt", "Single"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2566, "Zugkraft pro Achse", "Single"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2567, "Strom", "Single"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2568, "Spannung", "Single"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2569, "Motordrehzahl", "Single"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2570, "Uhrzeit Stunde", "Single"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2571, "Uhrzeit Minute", "Single"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2572, "Uhrzeit Sekunde", "Single"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2573, "LZB Ziel-Geschwindigkeit", "Single"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2574, "LZB/AFB Soll-Geschwindigkeit", "Single"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2575, "LZB Zielweg", "Single"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2576, "Fahrstufe", "Single"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2578, "AFB Soll-Geschwindigkeit", "Single"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2579, "Druck Hilfsluftbehälter", "Single"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2580, "LM PZB 1000Hz", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2581, "LM PZB 500Hz", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2582, "LM PZB Befehl", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2583, "LM PZB Zugart U", "BoolAndSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2584, "LM PZB Zugart M", "BoolAndSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2585, "LM PZB Zugart O", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2586, "LM LZB H", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2587, "LM LZB G", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2588, "LM LZB E40", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2589, "LM LZB EL", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2590, "LM LZB Ende", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2591, "LM LZB V40", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2592, "LM LZB B", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2593, "LM LZB S", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2594, "LM LZB Ü", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2595, "LM LZB Prüfen", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2596, "LM Sifa", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2597, "LM Hauptschalter", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2598, "LM Getriebe", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2599, "LM Schleudern", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2600, "LM Gleiten", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2601, "LM Mg-Bremse", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2602, "LM H-Bremse", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2603, "LM R-Bremse", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2604, "LM Hochabbremsung", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2605, "LM Schnellbremsung", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2606, "LM Notbremsung", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2607, "LM Türen", "Single"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2608, "LM Tfz-Nummer", "Single"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2609, "LM max. Tfz-Geschwindidigkeit", "Single"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2610, "LM Uhrzeit (digital)", "DateTime"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2611, "Schalter Fahrstufen", "Single"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2612, "Schalter Führerbremsventil", "Single"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2613, "Schalter dyn. Bremse", "Single"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2614, "Schalter Zusatzbremse", "Single"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2615, "Schalter AFB-Geschwindigkeit", "Single"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2616, "Schalter AFB ein/aus", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2617, "Schalter Mg-Bremse", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2618, "Schalter PZB Wachsam", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2619, "Schalter PZB Frei", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2620, "Schalter PZB Befehl", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2621, "Schalter Sifa", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2622, "Schalter Hauptschalter", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2623, "Schalter Motor ein/aus", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2624, "Schalter Fahrtrichtung", "IntAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2625, "Schalter Pfeife", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2626, "Schalter Sanden", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2627, "Schalter Türen", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2628, "Schalter Glocke", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2629, "Schalter Lokbremse entlüften", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2630, "Schalter Schleuderschutzbremse", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2631, "LM Drehzahlverstellung", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2632, "LM Fahrtrichtung vor", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2633, "LM Fahrtrichtung zurück", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2634, "Schalter Signum", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2635, "LM LZB Zielweg (ab 0)", "Single"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2636, "LZB Soll-Geschwindigkeit", "Single"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2637, "LM Block, bis zu dem die Strecke frei ist", "String"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2638, "Schalter Lüfter", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2639, "LM GNT G", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2640, "LM GNT Ü", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2641, "LM GNT B", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2642, "LM GNT S", "BoolAsSingle"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2645, "Strecken-Km", "Single"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2646, "Türen", "DoorsAsInt"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2647, "Autopilot", "BoolAsInt"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2648, "Reisezug", "BoolAsInt"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2649, "PZB-System", "PZBAsInt"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2650, "Frames per Second", "Single"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2651, "Führerstand sichtbar", "BoolAsInt"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2652, "Nächster Blockname", "String"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2653, "Nächstes Gleis", "String"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2654, "Bremshundertstel", "Single"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2655, "Bremsstellung", "BrakesAsInt"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2656, "Zugdatei", "String"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2657, "Längsbeschleunigung", "Single"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2658, "Querbeschleunigung", "Single"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2659, "Querneigung", "Single"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2660, "Aktuelle Höchstgeschwindigkeit", "Single"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2661, "Aktuelle Zielgeschwindigkeit", "Single"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2662, "Zielweg", "Single"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2663, "Abstand nächster Reisezughalt", "Single"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2664, "Name nächster Reisezughalt", "String"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2665, "Planzeit nächster Reisezughalt", "DateTime"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2666, "PZB restriktiv", "BoolAsInt"));
            document.Command.Add(new Zusi_Datenausgabe.CommandEntry(2667, "PZB-Zwansgbremsung", "BoolAsInt"));
            return document;
        }
        
        private void Recieved_Single(object state, Zusi_Datenausgabe.DataSet<Zusi_Datenausgabe.ReadedValue<float>> data) {
            if ((2561 == data.Id)) {
                if ((data.Value.ReadedData != this.Geschwindigkeit_)) {
                    this.Geschwindigkeit_ = data.Value.ReadedData;
                    this.Geschwindigkeit_Changed(this, new System.EventArgs());
                }
            }
            if ((2562 == data.Id)) {
                if ((data.Value.ReadedData != this.DruckHauptluftleitung_)) {
                    this.DruckHauptluftleitung_ = data.Value.ReadedData;
                    this.DruckHauptluftleitung_Changed(this, new System.EventArgs());
                }
            }
            if ((2563 == data.Id)) {
                if ((data.Value.ReadedData != this.DruckBremszylinder_)) {
                    this.DruckBremszylinder_ = data.Value.ReadedData;
                    this.DruckBremszylinder_Changed(this, new System.EventArgs());
                }
            }
            if ((2564 == data.Id)) {
                if ((data.Value.ReadedData != this.DruckHauptluftbehaelter_)) {
                    this.DruckHauptluftbehaelter_ = data.Value.ReadedData;
                    this.DruckHauptluftbehaelter_Changed(this, new System.EventArgs());
                }
            }
            if ((2565 == data.Id)) {
                if ((data.Value.ReadedData != this.ZugkraftGesamt_)) {
                    this.ZugkraftGesamt_ = data.Value.ReadedData;
                    this.ZugkraftGesamt_Changed(this, new System.EventArgs());
                }
            }
            if ((2566 == data.Id)) {
                if ((data.Value.ReadedData != this.ZugkraftProAchse_)) {
                    this.ZugkraftProAchse_ = data.Value.ReadedData;
                    this.ZugkraftProAchse_Changed(this, new System.EventArgs());
                }
            }
            if ((2567 == data.Id)) {
                if ((data.Value.ReadedData != this.Strom_)) {
                    this.Strom_ = data.Value.ReadedData;
                    this.Strom_Changed(this, new System.EventArgs());
                }
            }
            if ((2568 == data.Id)) {
                if ((data.Value.ReadedData != this.Spannung_)) {
                    this.Spannung_ = data.Value.ReadedData;
                    this.Spannung_Changed(this, new System.EventArgs());
                }
            }
            if ((2569 == data.Id)) {
                if ((data.Value.ReadedData != this.Motordrehzahl_)) {
                    this.Motordrehzahl_ = data.Value.ReadedData;
                    this.Motordrehzahl_Changed(this, new System.EventArgs());
                }
            }
            if ((2570 == data.Id)) {
                if ((data.Value.ReadedData != this.UhrzeitStunde_)) {
                    this.UhrzeitStunde_ = data.Value.ReadedData;
                    this.UhrzeitStunde_Changed(this, new System.EventArgs());
                }
            }
            if ((2571 == data.Id)) {
                if ((data.Value.ReadedData != this.UhrzeitMinute_)) {
                    this.UhrzeitMinute_ = data.Value.ReadedData;
                    this.UhrzeitMinute_Changed(this, new System.EventArgs());
                }
            }
            if ((2572 == data.Id)) {
                if ((data.Value.ReadedData != this.UhrzeitSekunde_)) {
                    this.UhrzeitSekunde_ = data.Value.ReadedData;
                    this.UhrzeitSekunde_Changed(this, new System.EventArgs());
                }
            }
            if ((2573 == data.Id)) {
                if ((data.Value.ReadedData != this.LZBZielGeschwindigkeit_)) {
                    this.LZBZielGeschwindigkeit_ = data.Value.ReadedData;
                    this.LZBZielGeschwindigkeit_Changed(this, new System.EventArgs());
                }
            }
            if ((2574 == data.Id)) {
                if ((data.Value.ReadedData != this.LZBAFBSollGeschwindigkeit_)) {
                    this.LZBAFBSollGeschwindigkeit_ = data.Value.ReadedData;
                    this.LZBAFBSollGeschwindigkeit_Changed(this, new System.EventArgs());
                }
            }
            if ((2575 == data.Id)) {
                if ((data.Value.ReadedData != this.LZBZielweg_)) {
                    this.LZBZielweg_ = data.Value.ReadedData;
                    this.LZBZielweg_Changed(this, new System.EventArgs());
                }
            }
            if ((2576 == data.Id)) {
                if ((data.Value.ReadedData != this.Fahrstufe_)) {
                    this.Fahrstufe_ = data.Value.ReadedData;
                    this.Fahrstufe_Changed(this, new System.EventArgs());
                }
            }
            if ((2578 == data.Id)) {
                if ((data.Value.ReadedData != this.AFBSollGeschwindigkeit_)) {
                    this.AFBSollGeschwindigkeit_ = data.Value.ReadedData;
                    this.AFBSollGeschwindigkeit_Changed(this, new System.EventArgs());
                }
            }
            if ((2579 == data.Id)) {
                if ((data.Value.ReadedData != this.DruckHilfsluftbehaelter_)) {
                    this.DruckHilfsluftbehaelter_ = data.Value.ReadedData;
                    this.DruckHilfsluftbehaelter_Changed(this, new System.EventArgs());
                }
            }
            if ((2607 == data.Id)) {
                if ((data.Value.ReadedData != this.LMTueren_)) {
                    this.LMTueren_ = data.Value.ReadedData;
                    this.LMTueren_Changed(this, new System.EventArgs());
                }
            }
            if ((2608 == data.Id)) {
                if ((data.Value.ReadedData != this.LMTfzNummer_)) {
                    this.LMTfzNummer_ = data.Value.ReadedData;
                    this.LMTfzNummer_Changed(this, new System.EventArgs());
                }
            }
            if ((2609 == data.Id)) {
                if ((data.Value.ReadedData != this.LMMaxTfzGeschwindidigkeit_)) {
                    this.LMMaxTfzGeschwindidigkeit_ = data.Value.ReadedData;
                    this.LMMaxTfzGeschwindidigkeit_Changed(this, new System.EventArgs());
                }
            }
            if ((2611 == data.Id)) {
                if ((data.Value.ReadedData != this.SchalterFahrstufen_)) {
                    this.SchalterFahrstufen_ = data.Value.ReadedData;
                    this.SchalterFahrstufen_Changed(this, new System.EventArgs());
                }
            }
            if ((2612 == data.Id)) {
                if ((data.Value.ReadedData != this.SchalterFuehrerbremsventil_)) {
                    this.SchalterFuehrerbremsventil_ = data.Value.ReadedData;
                    this.SchalterFuehrerbremsventil_Changed(this, new System.EventArgs());
                }
            }
            if ((2613 == data.Id)) {
                if ((data.Value.ReadedData != this.SchalterDynBremse_)) {
                    this.SchalterDynBremse_ = data.Value.ReadedData;
                    this.SchalterDynBremse_Changed(this, new System.EventArgs());
                }
            }
            if ((2614 == data.Id)) {
                if ((data.Value.ReadedData != this.SchalterZusatzbremse_)) {
                    this.SchalterZusatzbremse_ = data.Value.ReadedData;
                    this.SchalterZusatzbremse_Changed(this, new System.EventArgs());
                }
            }
            if ((2615 == data.Id)) {
                if ((data.Value.ReadedData != this.SchalterAFBGeschwindigkeit_)) {
                    this.SchalterAFBGeschwindigkeit_ = data.Value.ReadedData;
                    this.SchalterAFBGeschwindigkeit_Changed(this, new System.EventArgs());
                }
            }
            if ((2635 == data.Id)) {
                if ((data.Value.ReadedData != this.LMLZBZielwegAb0_)) {
                    this.LMLZBZielwegAb0_ = data.Value.ReadedData;
                    this.LMLZBZielwegAb0_Changed(this, new System.EventArgs());
                }
            }
            if ((2636 == data.Id)) {
                if ((data.Value.ReadedData != this.LZBSollGeschwindigkeit_)) {
                    this.LZBSollGeschwindigkeit_ = data.Value.ReadedData;
                    this.LZBSollGeschwindigkeit_Changed(this, new System.EventArgs());
                }
            }
            if ((2645 == data.Id)) {
                if ((data.Value.ReadedData != this.StreckenKm_)) {
                    this.StreckenKm_ = data.Value.ReadedData;
                    this.StreckenKm_Changed(this, new System.EventArgs());
                }
            }
            if ((2650 == data.Id)) {
                if ((data.Value.ReadedData != this.FramesPerSecond_)) {
                    this.FramesPerSecond_ = data.Value.ReadedData;
                    this.FramesPerSecond_Changed(this, new System.EventArgs());
                }
            }
            if ((2654 == data.Id)) {
                if ((data.Value.ReadedData != this.Bremshundertstel_)) {
                    this.Bremshundertstel_ = data.Value.ReadedData;
                    this.Bremshundertstel_Changed(this, new System.EventArgs());
                }
            }
            if ((2657 == data.Id)) {
                if ((data.Value.ReadedData != this.Laengsbeschleunigung_)) {
                    this.Laengsbeschleunigung_ = data.Value.ReadedData;
                    this.Laengsbeschleunigung_Changed(this, new System.EventArgs());
                }
            }
            if ((2658 == data.Id)) {
                if ((data.Value.ReadedData != this.Querbeschleunigung_)) {
                    this.Querbeschleunigung_ = data.Value.ReadedData;
                    this.Querbeschleunigung_Changed(this, new System.EventArgs());
                }
            }
            if ((2659 == data.Id)) {
                if ((data.Value.ReadedData != this.Querneigung_)) {
                    this.Querneigung_ = data.Value.ReadedData;
                    this.Querneigung_Changed(this, new System.EventArgs());
                }
            }
            if ((2660 == data.Id)) {
                if ((data.Value.ReadedData != this.AktuelleHoechstgeschwindigkeit_)) {
                    this.AktuelleHoechstgeschwindigkeit_ = data.Value.ReadedData;
                    this.AktuelleHoechstgeschwindigkeit_Changed(this, new System.EventArgs());
                }
            }
            if ((2661 == data.Id)) {
                if ((data.Value.ReadedData != this.AktuelleZielgeschwindigkeit_)) {
                    this.AktuelleZielgeschwindigkeit_ = data.Value.ReadedData;
                    this.AktuelleZielgeschwindigkeit_Changed(this, new System.EventArgs());
                }
            }
            if ((2662 == data.Id)) {
                if ((data.Value.ReadedData != this.Zielweg_)) {
                    this.Zielweg_ = data.Value.ReadedData;
                    this.Zielweg_Changed(this, new System.EventArgs());
                }
            }
            if ((2663 == data.Id)) {
                if ((data.Value.ReadedData != this.AbstandNaechsterReisezughalt_)) {
                    this.AbstandNaechsterReisezughalt_ = data.Value.ReadedData;
                    this.AbstandNaechsterReisezughalt_Changed(this, new System.EventArgs());
                }
            }
        }
        
        private int HandleDATA_Single(Zusi_Datenausgabe.IBinaryReader input, int id) {
            Zusi_Datenausgabe.ReadedValue<float> data = this.ReadSingle(input);
            this.PostToHost<Zusi_Datenausgabe.ReadedValue<float>>(new Zusi_Datenausgabe.ReceiveEvent<Zusi_Datenausgabe.ReadedValue<float>>(this.Recieved_Single), id, data);
            return data.ReadedLength;
        }
        
        private void Recieved_BoolAsSingle(object state, Zusi_Datenausgabe.DataSet<Zusi_Datenausgabe.ReadedValue<bool>> data) {
            if ((2580 == data.Id)) {
                if ((data.Value.ReadedData != this.LMPZB1000Hz_)) {
                    this.LMPZB1000Hz_ = data.Value.ReadedData;
                    this.LMPZB1000Hz_Changed(this, new System.EventArgs());
                }
            }
            if ((2581 == data.Id)) {
                if ((data.Value.ReadedData != this.LMPZB500Hz_)) {
                    this.LMPZB500Hz_ = data.Value.ReadedData;
                    this.LMPZB500Hz_Changed(this, new System.EventArgs());
                }
            }
            if ((2582 == data.Id)) {
                if ((data.Value.ReadedData != this.LMPZBBefehl_)) {
                    this.LMPZBBefehl_ = data.Value.ReadedData;
                    this.LMPZBBefehl_Changed(this, new System.EventArgs());
                }
            }
            if ((2585 == data.Id)) {
                if ((data.Value.ReadedData != this.LMPZBZugartO_)) {
                    this.LMPZBZugartO_ = data.Value.ReadedData;
                    this.LMPZBZugartO_Changed(this, new System.EventArgs());
                }
            }
            if ((2586 == data.Id)) {
                if ((data.Value.ReadedData != this.LMLZBH_)) {
                    this.LMLZBH_ = data.Value.ReadedData;
                    this.LMLZBH_Changed(this, new System.EventArgs());
                }
            }
            if ((2587 == data.Id)) {
                if ((data.Value.ReadedData != this.LMLZBG_)) {
                    this.LMLZBG_ = data.Value.ReadedData;
                    this.LMLZBG_Changed(this, new System.EventArgs());
                }
            }
            if ((2588 == data.Id)) {
                if ((data.Value.ReadedData != this.LMLZBE40_)) {
                    this.LMLZBE40_ = data.Value.ReadedData;
                    this.LMLZBE40_Changed(this, new System.EventArgs());
                }
            }
            if ((2589 == data.Id)) {
                if ((data.Value.ReadedData != this.LMLZBEL_)) {
                    this.LMLZBEL_ = data.Value.ReadedData;
                    this.LMLZBEL_Changed(this, new System.EventArgs());
                }
            }
            if ((2590 == data.Id)) {
                if ((data.Value.ReadedData != this.LMLZBEnde_)) {
                    this.LMLZBEnde_ = data.Value.ReadedData;
                    this.LMLZBEnde_Changed(this, new System.EventArgs());
                }
            }
            if ((2591 == data.Id)) {
                if ((data.Value.ReadedData != this.LMLZBV40_)) {
                    this.LMLZBV40_ = data.Value.ReadedData;
                    this.LMLZBV40_Changed(this, new System.EventArgs());
                }
            }
            if ((2592 == data.Id)) {
                if ((data.Value.ReadedData != this.LMLZBB_)) {
                    this.LMLZBB_ = data.Value.ReadedData;
                    this.LMLZBB_Changed(this, new System.EventArgs());
                }
            }
            if ((2593 == data.Id)) {
                if ((data.Value.ReadedData != this.LMLZBS_)) {
                    this.LMLZBS_ = data.Value.ReadedData;
                    this.LMLZBS_Changed(this, new System.EventArgs());
                }
            }
            if ((2594 == data.Id)) {
                if ((data.Value.ReadedData != this.LMLZBUe_)) {
                    this.LMLZBUe_ = data.Value.ReadedData;
                    this.LMLZBUe_Changed(this, new System.EventArgs());
                }
            }
            if ((2595 == data.Id)) {
                if ((data.Value.ReadedData != this.LMLZBPruefen_)) {
                    this.LMLZBPruefen_ = data.Value.ReadedData;
                    this.LMLZBPruefen_Changed(this, new System.EventArgs());
                }
            }
            if ((2596 == data.Id)) {
                if ((data.Value.ReadedData != this.LMSifa_)) {
                    this.LMSifa_ = data.Value.ReadedData;
                    this.LMSifa_Changed(this, new System.EventArgs());
                }
            }
            if ((2597 == data.Id)) {
                if ((data.Value.ReadedData != this.LMHauptschalter_)) {
                    this.LMHauptschalter_ = data.Value.ReadedData;
                    this.LMHauptschalter_Changed(this, new System.EventArgs());
                }
            }
            if ((2598 == data.Id)) {
                if ((data.Value.ReadedData != this.LMGetriebe_)) {
                    this.LMGetriebe_ = data.Value.ReadedData;
                    this.LMGetriebe_Changed(this, new System.EventArgs());
                }
            }
            if ((2599 == data.Id)) {
                if ((data.Value.ReadedData != this.LMSchleudern_)) {
                    this.LMSchleudern_ = data.Value.ReadedData;
                    this.LMSchleudern_Changed(this, new System.EventArgs());
                }
            }
            if ((2600 == data.Id)) {
                if ((data.Value.ReadedData != this.LMGleiten_)) {
                    this.LMGleiten_ = data.Value.ReadedData;
                    this.LMGleiten_Changed(this, new System.EventArgs());
                }
            }
            if ((2601 == data.Id)) {
                if ((data.Value.ReadedData != this.LMMgBremse_)) {
                    this.LMMgBremse_ = data.Value.ReadedData;
                    this.LMMgBremse_Changed(this, new System.EventArgs());
                }
            }
            if ((2602 == data.Id)) {
                if ((data.Value.ReadedData != this.LMHBremse_)) {
                    this.LMHBremse_ = data.Value.ReadedData;
                    this.LMHBremse_Changed(this, new System.EventArgs());
                }
            }
            if ((2603 == data.Id)) {
                if ((data.Value.ReadedData != this.LMRBremse_)) {
                    this.LMRBremse_ = data.Value.ReadedData;
                    this.LMRBremse_Changed(this, new System.EventArgs());
                }
            }
            if ((2604 == data.Id)) {
                if ((data.Value.ReadedData != this.LMHochabbremsung_)) {
                    this.LMHochabbremsung_ = data.Value.ReadedData;
                    this.LMHochabbremsung_Changed(this, new System.EventArgs());
                }
            }
            if ((2605 == data.Id)) {
                if ((data.Value.ReadedData != this.LMSchnellbremsung_)) {
                    this.LMSchnellbremsung_ = data.Value.ReadedData;
                    this.LMSchnellbremsung_Changed(this, new System.EventArgs());
                }
            }
            if ((2606 == data.Id)) {
                if ((data.Value.ReadedData != this.LMNotbremsung_)) {
                    this.LMNotbremsung_ = data.Value.ReadedData;
                    this.LMNotbremsung_Changed(this, new System.EventArgs());
                }
            }
            if ((2616 == data.Id)) {
                if ((data.Value.ReadedData != this.SchalterAFBEinAus_)) {
                    this.SchalterAFBEinAus_ = data.Value.ReadedData;
                    this.SchalterAFBEinAus_Changed(this, new System.EventArgs());
                }
            }
            if ((2617 == data.Id)) {
                if ((data.Value.ReadedData != this.SchalterMgBremse_)) {
                    this.SchalterMgBremse_ = data.Value.ReadedData;
                    this.SchalterMgBremse_Changed(this, new System.EventArgs());
                }
            }
            if ((2618 == data.Id)) {
                if ((data.Value.ReadedData != this.SchalterPZBWachsam_)) {
                    this.SchalterPZBWachsam_ = data.Value.ReadedData;
                    this.SchalterPZBWachsam_Changed(this, new System.EventArgs());
                }
            }
            if ((2619 == data.Id)) {
                if ((data.Value.ReadedData != this.SchalterPZBFrei_)) {
                    this.SchalterPZBFrei_ = data.Value.ReadedData;
                    this.SchalterPZBFrei_Changed(this, new System.EventArgs());
                }
            }
            if ((2620 == data.Id)) {
                if ((data.Value.ReadedData != this.SchalterPZBBefehl_)) {
                    this.SchalterPZBBefehl_ = data.Value.ReadedData;
                    this.SchalterPZBBefehl_Changed(this, new System.EventArgs());
                }
            }
            if ((2621 == data.Id)) {
                if ((data.Value.ReadedData != this.SchalterSifa_)) {
                    this.SchalterSifa_ = data.Value.ReadedData;
                    this.SchalterSifa_Changed(this, new System.EventArgs());
                }
            }
            if ((2622 == data.Id)) {
                if ((data.Value.ReadedData != this.SchalterHauptschalter_)) {
                    this.SchalterHauptschalter_ = data.Value.ReadedData;
                    this.SchalterHauptschalter_Changed(this, new System.EventArgs());
                }
            }
            if ((2623 == data.Id)) {
                if ((data.Value.ReadedData != this.SchalterMotorEinAus_)) {
                    this.SchalterMotorEinAus_ = data.Value.ReadedData;
                    this.SchalterMotorEinAus_Changed(this, new System.EventArgs());
                }
            }
            if ((2625 == data.Id)) {
                if ((data.Value.ReadedData != this.SchalterPfeife_)) {
                    this.SchalterPfeife_ = data.Value.ReadedData;
                    this.SchalterPfeife_Changed(this, new System.EventArgs());
                }
            }
            if ((2626 == data.Id)) {
                if ((data.Value.ReadedData != this.SchalterSanden_)) {
                    this.SchalterSanden_ = data.Value.ReadedData;
                    this.SchalterSanden_Changed(this, new System.EventArgs());
                }
            }
            if ((2627 == data.Id)) {
                if ((data.Value.ReadedData != this.SchalterTueren_)) {
                    this.SchalterTueren_ = data.Value.ReadedData;
                    this.SchalterTueren_Changed(this, new System.EventArgs());
                }
            }
            if ((2628 == data.Id)) {
                if ((data.Value.ReadedData != this.SchalterGlocke_)) {
                    this.SchalterGlocke_ = data.Value.ReadedData;
                    this.SchalterGlocke_Changed(this, new System.EventArgs());
                }
            }
            if ((2629 == data.Id)) {
                if ((data.Value.ReadedData != this.SchalterLokbremseEntlueften_)) {
                    this.SchalterLokbremseEntlueften_ = data.Value.ReadedData;
                    this.SchalterLokbremseEntlueften_Changed(this, new System.EventArgs());
                }
            }
            if ((2630 == data.Id)) {
                if ((data.Value.ReadedData != this.SchalterSchleuderschutzbremse_)) {
                    this.SchalterSchleuderschutzbremse_ = data.Value.ReadedData;
                    this.SchalterSchleuderschutzbremse_Changed(this, new System.EventArgs());
                }
            }
            if ((2631 == data.Id)) {
                if ((data.Value.ReadedData != this.LMDrehzahlverstellung_)) {
                    this.LMDrehzahlverstellung_ = data.Value.ReadedData;
                    this.LMDrehzahlverstellung_Changed(this, new System.EventArgs());
                }
            }
            if ((2632 == data.Id)) {
                if ((data.Value.ReadedData != this.LMFahrtrichtungVor_)) {
                    this.LMFahrtrichtungVor_ = data.Value.ReadedData;
                    this.LMFahrtrichtungVor_Changed(this, new System.EventArgs());
                }
            }
            if ((2633 == data.Id)) {
                if ((data.Value.ReadedData != this.LMFahrtrichtungZurueck_)) {
                    this.LMFahrtrichtungZurueck_ = data.Value.ReadedData;
                    this.LMFahrtrichtungZurueck_Changed(this, new System.EventArgs());
                }
            }
            if ((2634 == data.Id)) {
                if ((data.Value.ReadedData != this.SchalterSignum_)) {
                    this.SchalterSignum_ = data.Value.ReadedData;
                    this.SchalterSignum_Changed(this, new System.EventArgs());
                }
            }
            if ((2638 == data.Id)) {
                if ((data.Value.ReadedData != this.SchalterLuefter_)) {
                    this.SchalterLuefter_ = data.Value.ReadedData;
                    this.SchalterLuefter_Changed(this, new System.EventArgs());
                }
            }
            if ((2639 == data.Id)) {
                if ((data.Value.ReadedData != this.LMGNTG_)) {
                    this.LMGNTG_ = data.Value.ReadedData;
                    this.LMGNTG_Changed(this, new System.EventArgs());
                }
            }
            if ((2640 == data.Id)) {
                if ((data.Value.ReadedData != this.LMGNTUe_)) {
                    this.LMGNTUe_ = data.Value.ReadedData;
                    this.LMGNTUe_Changed(this, new System.EventArgs());
                }
            }
            if ((2641 == data.Id)) {
                if ((data.Value.ReadedData != this.LMGNTB_)) {
                    this.LMGNTB_ = data.Value.ReadedData;
                    this.LMGNTB_Changed(this, new System.EventArgs());
                }
            }
            if ((2642 == data.Id)) {
                if ((data.Value.ReadedData != this.LMGNTS_)) {
                    this.LMGNTS_ = data.Value.ReadedData;
                    this.LMGNTS_Changed(this, new System.EventArgs());
                }
            }
        }
        
        private int HandleDATA_BoolAsSingle(Zusi_Datenausgabe.IBinaryReader input, int id) {
            Zusi_Datenausgabe.ReadedValue<bool> data = this.ReadBoolAsSingle(input);
            this.PostToHost<Zusi_Datenausgabe.ReadedValue<bool>>(new Zusi_Datenausgabe.ReceiveEvent<Zusi_Datenausgabe.ReadedValue<bool>>(this.Recieved_BoolAsSingle), id, data);
            return data.ReadedLength;
        }
        
        private void Recieved_BoolAndSingle(object state, Zusi_Datenausgabe.DataSet<Zusi_Datenausgabe.BoolAndSingleStruct> data) {
            if ((2583 == data.Id)) {
                if ((data.Value.ReadedData != this.LMPZBZugartU_Boolean_)) {
                    this.LMPZBZugartU_Boolean_ = data.Value.ReadedData;
                    this.LMPZBZugartU_Boolean_Changed(this, new System.EventArgs());
                }
                if ((data.Value.PZ80Data != this.LMPZBZugartU_Single_)) {
                    this.LMPZBZugartU_Single_ = data.Value.PZ80Data;
                    this.LMPZBZugartU_Single_Changed(this, new System.EventArgs());
                }
            }
            if ((2584 == data.Id)) {
                if ((data.Value.ReadedData != this.LMPZBZugartM_Boolean_)) {
                    this.LMPZBZugartM_Boolean_ = data.Value.ReadedData;
                    this.LMPZBZugartM_Boolean_Changed(this, new System.EventArgs());
                }
                if ((data.Value.PZ80Data != this.LMPZBZugartM_Single_)) {
                    this.LMPZBZugartM_Single_ = data.Value.PZ80Data;
                    this.LMPZBZugartM_Single_Changed(this, new System.EventArgs());
                }
            }
        }
        
        private int HandleDATA_BoolAndSingle(Zusi_Datenausgabe.IBinaryReader input, int id) {
            Zusi_Datenausgabe.BoolAndSingleStruct data = this.ReadBoolAndSingle(input);
            this.PostToHost<Zusi_Datenausgabe.BoolAndSingleStruct>(new Zusi_Datenausgabe.ReceiveEvent<Zusi_Datenausgabe.BoolAndSingleStruct>(this.Recieved_BoolAndSingle), id, data);
            return data.ReadedLength;
        }
        
        private void Recieved_DateTime(object state, Zusi_Datenausgabe.DataSet<Zusi_Datenausgabe.ReadedValue<System.DateTime>> data) {
            if ((2610 == data.Id)) {
                if ((data.Value.ReadedData != this.LMUhrzeitDigital_)) {
                    this.LMUhrzeitDigital_ = data.Value.ReadedData;
                    this.LMUhrzeitDigital_Changed(this, new System.EventArgs());
                }
            }
            if ((2665 == data.Id)) {
                if ((data.Value.ReadedData != this.PlanzeitNaechsterReisezughalt_)) {
                    this.PlanzeitNaechsterReisezughalt_ = data.Value.ReadedData;
                    this.PlanzeitNaechsterReisezughalt_Changed(this, new System.EventArgs());
                }
            }
        }
        
        private int HandleDATA_DateTime(Zusi_Datenausgabe.IBinaryReader input, int id) {
            Zusi_Datenausgabe.ReadedValue<System.DateTime> data = this.ReadDateTime(input);
            this.PostToHost<Zusi_Datenausgabe.ReadedValue<System.DateTime>>(new Zusi_Datenausgabe.ReceiveEvent<Zusi_Datenausgabe.ReadedValue<System.DateTime>>(this.Recieved_DateTime), id, data);
            return data.ReadedLength;
        }
        
        private void Recieved_IntAsSingle(object state, Zusi_Datenausgabe.DataSet<Zusi_Datenausgabe.ReadedValue<int>> data) {
            if ((2624 == data.Id)) {
                if ((data.Value.ReadedData != this.SchalterFahrtrichtung_)) {
                    this.SchalterFahrtrichtung_ = data.Value.ReadedData;
                    this.SchalterFahrtrichtung_Changed(this, new System.EventArgs());
                }
            }
        }
        
        private int HandleDATA_IntAsSingle(Zusi_Datenausgabe.IBinaryReader input, int id) {
            Zusi_Datenausgabe.ReadedValue<int> data = this.ReadIntAsSingle(input);
            this.PostToHost<Zusi_Datenausgabe.ReadedValue<int>>(new Zusi_Datenausgabe.ReceiveEvent<Zusi_Datenausgabe.ReadedValue<int>>(this.Recieved_IntAsSingle), id, data);
            return data.ReadedLength;
        }
        
        private void Recieved_String(object state, Zusi_Datenausgabe.DataSet<Zusi_Datenausgabe.ReadedValue<string>> data) {
            if ((2637 == data.Id)) {
                if ((data.Value.ReadedData != this.LMBlockBisZuDemDieStreckeFreiIst_)) {
                    this.LMBlockBisZuDemDieStreckeFreiIst_ = data.Value.ReadedData;
                    this.LMBlockBisZuDemDieStreckeFreiIst_Changed(this, new System.EventArgs());
                }
            }
            if ((2652 == data.Id)) {
                if ((data.Value.ReadedData != this.NaechsterBlockname_)) {
                    this.NaechsterBlockname_ = data.Value.ReadedData;
                    this.NaechsterBlockname_Changed(this, new System.EventArgs());
                }
            }
            if ((2653 == data.Id)) {
                if ((data.Value.ReadedData != this.NaechstesGleis_)) {
                    this.NaechstesGleis_ = data.Value.ReadedData;
                    this.NaechstesGleis_Changed(this, new System.EventArgs());
                }
            }
            if ((2656 == data.Id)) {
                if ((data.Value.ReadedData != this.Zugdatei_)) {
                    this.Zugdatei_ = data.Value.ReadedData;
                    this.Zugdatei_Changed(this, new System.EventArgs());
                }
            }
            if ((2664 == data.Id)) {
                if ((data.Value.ReadedData != this.NameNaechsterReisezughalt_)) {
                    this.NameNaechsterReisezughalt_ = data.Value.ReadedData;
                    this.NameNaechsterReisezughalt_Changed(this, new System.EventArgs());
                }
            }
        }
        
        private int HandleDATA_String(Zusi_Datenausgabe.IBinaryReader input, int id) {
            Zusi_Datenausgabe.ReadedValue<string> data = this.ReadString(input);
            this.PostToHost<Zusi_Datenausgabe.ReadedValue<string>>(new Zusi_Datenausgabe.ReceiveEvent<Zusi_Datenausgabe.ReadedValue<string>>(this.Recieved_String), id, data);
            return data.ReadedLength;
        }
        
        private void Recieved_DoorsAsInt(object state, Zusi_Datenausgabe.DataSet<Zusi_Datenausgabe.ReadedValue<Zusi_Datenausgabe.DoorState>> data) {
            if ((2646 == data.Id)) {
                if ((data.Value.ReadedData != this.Tueren_)) {
                    this.Tueren_ = data.Value.ReadedData;
                    this.Tueren_Changed(this, new System.EventArgs());
                }
            }
        }
        
        private int HandleDATA_DoorsAsInt(Zusi_Datenausgabe.IBinaryReader input, int id) {
            Zusi_Datenausgabe.ReadedValue<Zusi_Datenausgabe.DoorState> data = this.ReadDoorsAsInt(input);
            this.PostToHost<Zusi_Datenausgabe.ReadedValue<Zusi_Datenausgabe.DoorState>>(new Zusi_Datenausgabe.ReceiveEvent<Zusi_Datenausgabe.ReadedValue<Zusi_Datenausgabe.DoorState>>(this.Recieved_DoorsAsInt), id, data);
            return data.ReadedLength;
        }
        
        private void Recieved_BoolAsInt(object state, Zusi_Datenausgabe.DataSet<Zusi_Datenausgabe.ReadedValue<bool>> data) {
            if ((2647 == data.Id)) {
                if ((data.Value.ReadedData != this.Autopilot_)) {
                    this.Autopilot_ = data.Value.ReadedData;
                    this.Autopilot_Changed(this, new System.EventArgs());
                }
            }
            if ((2648 == data.Id)) {
                if ((data.Value.ReadedData != this.Reisezug_)) {
                    this.Reisezug_ = data.Value.ReadedData;
                    this.Reisezug_Changed(this, new System.EventArgs());
                }
            }
            if ((2651 == data.Id)) {
                if ((data.Value.ReadedData != this.FuehrerstandSichtbar_)) {
                    this.FuehrerstandSichtbar_ = data.Value.ReadedData;
                    this.FuehrerstandSichtbar_Changed(this, new System.EventArgs());
                }
            }
            if ((2666 == data.Id)) {
                if ((data.Value.ReadedData != this.PZBRestriktiv_)) {
                    this.PZBRestriktiv_ = data.Value.ReadedData;
                    this.PZBRestriktiv_Changed(this, new System.EventArgs());
                }
            }
            if ((2667 == data.Id)) {
                if ((data.Value.ReadedData != this.PZBZwansgbremsung_)) {
                    this.PZBZwansgbremsung_ = data.Value.ReadedData;
                    this.PZBZwansgbremsung_Changed(this, new System.EventArgs());
                }
            }
        }
        
        private int HandleDATA_BoolAsInt(Zusi_Datenausgabe.IBinaryReader input, int id) {
            Zusi_Datenausgabe.ReadedValue<bool> data = this.ReadBoolAsInt(input);
            this.PostToHost<Zusi_Datenausgabe.ReadedValue<bool>>(new Zusi_Datenausgabe.ReceiveEvent<Zusi_Datenausgabe.ReadedValue<bool>>(this.Recieved_BoolAsInt), id, data);
            return data.ReadedLength;
        }
        
        private void Recieved_PZBAsInt(object state, Zusi_Datenausgabe.DataSet<Zusi_Datenausgabe.ReadedValue<Zusi_Datenausgabe.PZBSystem>> data) {
            if ((2649 == data.Id)) {
                if ((data.Value.ReadedData != this.PZBSystem_)) {
                    this.PZBSystem_ = data.Value.ReadedData;
                    this.PZBSystem_Changed(this, new System.EventArgs());
                }
            }
        }
        
        private int HandleDATA_PZBAsInt(Zusi_Datenausgabe.IBinaryReader input, int id) {
            Zusi_Datenausgabe.ReadedValue<Zusi_Datenausgabe.PZBSystem> data = this.ReadPZBAsInt(input);
            this.PostToHost<Zusi_Datenausgabe.ReadedValue<Zusi_Datenausgabe.PZBSystem>>(new Zusi_Datenausgabe.ReceiveEvent<Zusi_Datenausgabe.ReadedValue<Zusi_Datenausgabe.PZBSystem>>(this.Recieved_PZBAsInt), id, data);
            return data.ReadedLength;
        }
        
        private void Recieved_BrakesAsInt(object state, Zusi_Datenausgabe.DataSet<Zusi_Datenausgabe.ReadedValue<Zusi_Datenausgabe.BrakeConfiguration>> data) {
            if ((2655 == data.Id)) {
                if ((data.Value.ReadedData != this.Bremsstellung_)) {
                    this.Bremsstellung_ = data.Value.ReadedData;
                    this.Bremsstellung_Changed(this, new System.EventArgs());
                }
            }
        }
        
        private int HandleDATA_BrakesAsInt(Zusi_Datenausgabe.IBinaryReader input, int id) {
            Zusi_Datenausgabe.ReadedValue<Zusi_Datenausgabe.BrakeConfiguration> data = this.ReadBrakesAsInt(input);
            this.PostToHost<Zusi_Datenausgabe.ReadedValue<Zusi_Datenausgabe.BrakeConfiguration>>(new Zusi_Datenausgabe.ReceiveEvent<Zusi_Datenausgabe.ReadedValue<Zusi_Datenausgabe.BrakeConfiguration>>(this.Recieved_BrakesAsInt), id, data);
            return data.ReadedLength;
        }
    }
}
